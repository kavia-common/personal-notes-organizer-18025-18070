{"is_source_file": true, "format": "TypeScript", "description": "This file provides an API client module for handling notes and user authentication. It wraps fetch calls for server communication and includes in-memory fallbacks for offline or demo usage. The code defines data types for notes, users, and credentials, and functions to manage login, registration, notes CRUD operations, and session management.", "external_files": ["fetch"], "external_methods": ["fetch"], "published": ["Note", "User", "Credentials", "getApiBase", "login", "register", "logout", "listNotes", "createNote", "updateNote", "deleteNote"], "classes": [], "methods": [{"name": "getApiBase", "description": "Returns the backend base URL read from environment variable or null if not configured."}, {"name": "export async function login(creds: Credentials): Promise<User> { login", "description": "Logs in a user, either via backend API or in-memory fallback, and returns a User object with token.", "scope": "", "scopeKind": ""}, {"name": "export async function register(creds: Credentials): Promise<User> { register", "description": "Registers a user via backend API or in-memory fallback, then logs in automatically.", "scope": "", "scopeKind": ""}, {"name": "export async function logout(token: string | null | undefined): Promise<void> { logout", "description": "Logs out the user by invalidating the session token or calling backend API.", "scope": "", "scopeKind": ""}, {"name": "export async function listNotes(token?: string): Promise<Note[]> { listNotes", "description": "Retrieves all notes for the authenticated user, from backend API or fallback store.", "scope": "", "scopeKind": ""}, {"name": "export async function createNote(payload: Pick<Note, \"title\" | \"content\" | \"tags\">, token?: stri/ createNote", "description": "Creates a new note via backend or fallback store.", "scope": "", "scopeKind": ""}, {"name": "export async function updateNote(id: string, payload: Partial<Pick<Note, \"title\" | \"content\" | \"/ updateNote", "description": "Updates an existing note by ID via backend or fallback.", "scope": "", "scopeKind": ""}, {"name": "export async function deleteNote(id: string, token?: string): Promise<void> { deleteNote", "description": "Deletes a note by ID via backend or fallback.", "scope": "", "scopeKind": ""}, {"name": "function nowIso() { nowIso", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "function simulateNetwork<T>(result: T, delay = 200): Promise<T> { simulateNetwork", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["fetch", "setTimeout", "new Date().toISOString()", "crypto.randomUUID()"], "search-terms": ["api.ts", "Notes API client", "authentication", "offline fallback", "memoryStore", "fetch wrapper", "TypeScript types", "Note", "User"], "state": 2, "file_id": 12, "knowledge_revision": 61, "git_revision": "", "revision_history": [{"25": ""}, {"61": ""}], "ctags": [{"_type": "tag", "name": "Credentials", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^export type Credentials = {$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "Note", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^export type Note = {$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "User", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^export type User = {$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "base", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^  const base = getApiBase();$/", "language": "TypeScript", "kind": "constant", "scope": "createNote", "scopeKind": "function"}, {"_type": "tag", "name": "base", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^  const base = getApiBase();$/", "language": "TypeScript", "kind": "constant", "scope": "deleteNote", "scopeKind": "function"}, {"_type": "tag", "name": "base", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^  const base = getApiBase();$/", "language": "TypeScript", "kind": "constant", "scope": "listNotes", "scopeKind": "function"}, {"_type": "tag", "name": "base", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^  const base = getApiBase();$/", "language": "TypeScript", "kind": "constant", "scope": "login", "scopeKind": "function"}, {"_type": "tag", "name": "base", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^  const base = getApiBase();$/", "language": "TypeScript", "kind": "constant", "scope": "logout", "scopeKind": "function"}, {"_type": "tag", "name": "base", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^  const base = getApiBase();$/", "language": "TypeScript", "kind": "constant", "scope": "register", "scopeKind": "function"}, {"_type": "tag", "name": "base", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^  const base = getApiBase();$/", "language": "TypeScript", "kind": "constant", "scope": "updateNote", "scopeKind": "function"}, {"_type": "tag", "name": "createNote", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^export async function createNote(payload: Pick<Note, \"title\" | \"content\" | \"tags\">, token?: stri/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "creds", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^  const existing = memoryStore.users[creds.email];$/", "language": "TypeScript", "kind": "constant", "scope": "login", "scopeKind": "function"}, {"_type": "tag", "name": "creds", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^  const userId = memoryStore.users[creds.email].id;$/", "language": "TypeScript", "kind": "constant", "scope": "login", "scopeKind": "function"}, {"_type": "tag", "name": "deleteNote", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^export async function deleteNote(id: string, token?: string): Promise<void> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "existing", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^  const existing = memoryStore.notes[idx];$/", "language": "TypeScript", "kind": "constant", "scope": "updateNote", "scopeKind": "function"}, {"_type": "tag", "name": "existing", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^  const existing = memoryStore.users[creds.email];$/", "language": "TypeScript", "kind": "constant", "scope": "login", "scopeKind": "function"}, {"_type": "tag", "name": "getApiBase", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^export const getApiBase = (): string | null => {$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "id", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^    const id = crypto.randomUUID();$/", "language": "TypeScript", "kind": "constant", "scope": "login", "scopeKind": "function"}, {"_type": "tag", "name": "id", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^  const id = crypto.randomUUID();$/", "language": "TypeScript", "kind": "constant", "scope": "register", "scopeKind": "function"}, {"_type": "tag", "name": "idx", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^  const existing = memoryStore.notes[idx];$/", "language": "TypeScript", "kind": "constant", "scope": "updateNote", "scopeKind": "function"}, {"_type": "tag", "name": "idx", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^  const idx = memoryStore.notes.findIndex((n) => n.id === id);$/", "language": "TypeScript", "kind": "constant", "scope": "updateNote", "scopeKind": "function"}, {"_type": "tag", "name": "listNotes", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^export async function listNotes(token?: string): Promise<Note[]> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "login", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^export async function login(creds: Credentials): Promise<User> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "logout", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^export async function logout(token: string | null | undefined): Promise<void> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "memoryStore", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^const memoryStore: { notes: Note[]; users: Record<string, { password: string; id: string }>; ses/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "msg", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^      const msg = await res.text();$/", "language": "TypeScript", "kind": "constant", "scope": "register", "scopeKind": "function"}, {"_type": "tag", "name": "note", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^  const note: Note = { id: crypto.randomUUID(), title: payload.title, content: payload.content, /", "language": "TypeScript", "kind": "constant", "scope": "createNote", "scopeKind": "function"}, {"_type": "tag", "name": "nowIso", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^function nowIso() {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "register", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^export async function register(creds: Credentials): Promise<User> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "res", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^    const res = await fetch(`${base}\\/auth\\/login`, {$/", "language": "TypeScript", "kind": "constant", "scope": "login", "scopeKind": "function"}, {"_type": "tag", "name": "res", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^    const res = await fetch(`${base}\\/auth\\/register`, {$/", "language": "TypeScript", "kind": "constant", "scope": "register", "scopeKind": "function"}, {"_type": "tag", "name": "res", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^    const res = await fetch(`${base}\\/notes\\/${id}`, {$/", "language": "TypeScript", "kind": "constant", "scope": "deleteNote", "scopeKind": "function"}, {"_type": "tag", "name": "res", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^    const res = await fetch(`${base}\\/notes\\/${id}`, {$/", "language": "TypeScript", "kind": "constant", "scope": "updateNote", "scopeKind": "function"}, {"_type": "tag", "name": "res", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^    const res = await fetch(`${base}\\/notes`, {$/", "language": "TypeScript", "kind": "constant", "scope": "createNote", "scopeKind": "function"}, {"_type": "tag", "name": "res", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^    const res = await fetch(`${base}\\/notes`, {$/", "language": "TypeScript", "kind": "constant", "scope": "listNotes", "scopeKind": "function"}, {"_type": "tag", "name": "sessions", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^const memoryStore: { notes: Note[]; users: Record<string, { password: string; id: string }>; ses/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "simulateNetwork", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^function simulateNetwork<T>(result: T, delay = 200): Promise<T> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "token", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^  const token = crypto.randomUUID();$/", "language": "TypeScript", "kind": "constant", "scope": "login", "scopeKind": "function"}, {"_type": "tag", "name": "token", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^  const token = crypto.randomUUID();$/", "language": "TypeScript", "kind": "constant", "scope": "register", "scopeKind": "function"}, {"_type": "tag", "name": "updateNote", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^export async function updateNote(id: string, payload: Partial<Pick<Note, \"title\" | \"content\" | \"/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "updated", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^  const updated: Note = {$/", "language": "TypeScript", "kind": "constant", "scope": "updateNote", "scopeKind": "function"}, {"_type": "tag", "name": "updatedAt", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^    updatedAt: nowIso(),$/", "language": "TypeScript", "kind": "constant", "scope": "updateNote", "scopeKind": "function"}, {"_type": "tag", "name": "userId", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^  const userId = memoryStore.users[creds.email].id;$/", "language": "TypeScript", "kind": "constant", "scope": "login", "scopeKind": "function"}, {"_type": "tag", "name": "users", "path": "/home/kavia/workspace/code-generation/personal-notes-organizer-18025-18070/notes_frontend/src/lib/api.ts", "pattern": "/^const memoryStore: { notes: Note[]; users: Record<string, { password: string; id: string }>; ses/", "language": "TypeScript", "kind": "constant"}], "hash": "1cdd19d48e3532c32cd912521d2d20cf", "format-version": 4, "code-base-name": "notes_frontend", "filename": "notes_frontend/src/lib/api.ts"}